// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title QuantumShield
 * @dev A security-focused smart contract designed to protect digital assets 
 *      using multi-signature authorization and emergency shielding mechanisms.
 */
contract QuantumShield {
    address public owner;
    mapping(address => bool) public authorizedGuardians;
    bool public isShieldActive;

    event ShieldActivated(address indexed activator, uint256 timestamp);
    event GuardianAdded(address indexed guardian);
    event GuardianRemoved(address indexed guardian);
    event FundsRecovered(address indexed to, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized: Owner only");
        _;
    }

    modifier onlyGuardian() {
        require(authorizedGuardians[msg.sender], "Not authorized: Guardian only");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    /**
     * @dev Add a guardian who can activate emergency shielding.
     * @param _guardian Address of the guardian to be added.
     */
    function addGuardian(address _guardian) external onlyOwner {
        authorizedGuardians[_guardian] = true;
        emit GuardianAdded(_guardian);
    }

    /**
     * @dev Activate the quantum shield (freeze operations).
     * Can be triggered by the owner or any authorized guardian.
     */
    function activateShield() external {
        require(msg.sender == owner || authorizedGuardians[msg.sender], "Not authorized to activate shield");
        isShieldActive = true;
        emit ShieldActivated(msg.sender, block.timestamp);
    }

    /**
     * @dev Allow the owner to recover funds in case of an emergency.
     * Can only be executed when the shield is active.
     * @param _to Recipient address.
     */
    function recoverFunds(address payable _to) external onlyOwner {
        require(isShieldActive, "Shield must be active to recover funds");
        uint256 balance = address(this).balance;
        (bool sent, ) = _to.call{value: balance}("");
        require(sent, "Fund recovery failed");
        emit FundsRecovered(_to, balance);
    }

    // Accept ETH deposits
    receive() external payable {}
}
